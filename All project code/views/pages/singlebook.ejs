<%- include ('../partials/head') %>
<%- include ('../partials/menu') %>


      <% try {
        // IF HALF_NUM_LINES IS CHANGE NEED TO CHANGE LINES_PER_PAGE in index.js//initial_singlebook/:id to be 2xHALF_NUM_LINES
        // ALSO IF HALF_NUM_LINES_CHANGED NEED TO RESET ALL DATA IN DATABASE
        const HALF_NUM_LINES = 30; //change this variable to alter # lines rendered per page
        const LINES_PER_PAGE = HALF_NUM_LINES *2
        const startLine = (currentPage - 1) * HALF_NUM_LINES;
        const endLine = startLine + HALF_NUM_LINES;
        const page = book.contents.split('\n').slice(startLine, endLine+HALF_NUM_LINES).join('');

        const lines_in_book = book.contents.split(/\r\n|\r|\n/).length;
        const pages_in_book = Math.ceil(lines_in_book/LINES_PER_PAGE);
      %>
      
      <main>
        <!-- The following 2 divs are an attempt to pass ejs variables into 
          javascript without my syntax error detection getting a false positive -->
        <div hidden id="current_page"><%=currentPage%></div>
        <div hidden id="book_id"><%=book.id%></div>

  <div class="col-container">
    <div class="col-9">
      <div class="container" id="annotation_pages">
        <!-- this should eventually be changed to the books title -->
        <h1>Book </h1>
        <pre id="book_display">
          <%= page %>
        </pre>

        <!-- page number / buttons -->  
        <div style="display: flex; justify-content: center;">
          <b>Page <%=currentPage%>/<%=pages_in_book%></b>
        </div>
        <div style="display: flex; justify-content: center;">
          <button class="btn btn-primary" onclick="create_annotation()">Annotate</button>
          <form method="GET" action="/books">
            <button class="btn btn-warning" type="submit">Back</button>
          </form>
          <form method="GET" action="/changePage/<%=book.id%>/<%=currentPage-1%>">
            <button class="btn btn-primary" type="submit">Prev Page</button>
          </form>
          <form method="GET" action="/changePage/<%=book.id%>/<%=currentPage+1%>">
            <button class="btn btn-primary" type="submit">Next Page</button>
          </form>
          <form method="GET" id="skipToForm">
            <button class="btn btn-info" type="button" onclick="skipTo()">Skip to</button>
            <input style="width: 40px"pattern="[0-9]+" type="text" id="skipToInput" name="skipToPage">
          </form>
        </div>
      </div>
    </div>

    <!-- current annotations / comments colum -->
    <div class="col-3">
      <div class="row justify-content-md-center" id="cur_annotation_row">
        <h6>current annotation</h6>
        <div class="container-fluid" id="current_annotation_box"></div>
      </div>
      <div class="row justify-content-md-center" id="comment_section_row">
        <h6 id="comments_header">comments</h6>
        <div class="container-fluid" id="comment_section"></div>
      </div>
      <div class="row justify-content-md-center" id="add_comment_row">
        <input type="text" id="add_comment_text">
        <button onclick="add_comment(add_comment_text.value)" id="add_comment_btn">add comment</button>
      </div> 
    </div>
  </div>

  
      <% } catch (error) { %>
        <p>Error: <%= error.message %></p>
      <% } %>
</main>

      

  


<%- include ('../partials/footer') %>

<script>
let annotations = [];
let cur_annotation;

let book_contents;
let page_length;
let PAGE_NUMBER; 
let BOOK_ID;

document.querySelector("main").onload = initialize_page();

function initialize_page(){
  PAGE_NUMBER = Number(document.getElementById('current_page').textContent);
  BOOK_ID = Number(document.getElementById('book_id').textContent);
  book_contents = document.getElementById('book_display').textContent;
  page_length = book_contents.length;
  console.log(BOOK_ID);
  console.log(PAGE_NUMBER);
  console.log(page_length);

  var new_annotation;
  fetch('/annotations_for_page', {
    method: "POST",
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      book_id: BOOK_ID,
      page_number: PAGE_NUMBER,
    })
  })
  .then(responce => {
    responce.json().then( (result) =>{
      result.forEach((ann) => {
        new_annotation = {
        id:ann.id,
        comments: [],
        start_index: ann.start_index, 
        end_index: ann.end_index 
        };
        annotations.push(new_annotation);
      });
      highlight_annotations();
      load_comments();
    });
  });
}
function load_comments(){
  fetch('/get_comments_for_annotations', {
    method: "POST",
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      annotations: annotations
    })
  })
  .then(responce => {
    responce.json().then( (result) =>{
      result.forEach((ann) => {
        annotation_to_load = annotations.find((a)=>{return a.id == ann.id});
        annotation_to_load.comments = ann.comments;
      });
    });
  });
}

function set_cur_annotation(id){
  cur_annotation = annotations.find(ann => {return ann.id == id});
  refresh_comments();
}

function removeAllChildren(node){
  while(node.hasChildNodes()){
    node.removeChild(node.firstChild);
  }
}

function add_comment(text){
  var new_comment;
  fetch('/add_comment', {
    method: "POST",
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      annotation_id: cur_annotation.id,
      comment: text
    })
  })
  .then(responce => {
    responce.json().then( (result) =>{
      new_comment = {
        id:result.id,
        comment: text
      };
      cur_annotation.comments.push(new_comment);
      refresh_comments();
    });
  });
  
}

function largest_id(array){
  let largest = -1;
  array.forEach(element => {
    if(element.id > largest){
      largest = element.id;
    }
  });
  return largest;
}

function refresh_comments(){
  const comments_section = document.getElementById('comment_section');
  const annotation_box = document.getElementById('current_annotation_box');

  //clear old comments
  removeAllChildren(comments_section);

  //refresh annotation_box
  
  annotation_box.innerHTML 
    = book_contents.slice(cur_annotation.start_index, cur_annotation.end_index);

  //display this annotated text's comments
    // FIX ME: query database for what comments this annotation has

  cur_annotation.comments.forEach(comment => {
    new_comment = document.createElement('div');
    new_comment.classList.add('card');
    new_comment.classList.add('comment');
    new_comment.innerHTML = comment.comment;

    comments_section.appendChild(new_comment);
  });
}

function create_annotation(){
  console.log("creating annotations");
  const selected_text = window.getSelection().toString();
  var new_annotation;
  fetch('/create_annotation', {
    method: "POST",
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      book_id: BOOK_ID,
      page_number: PAGE_NUMBER,
      start_index: book_contents.search(selected_text), 
      end_index: book_contents.search(selected_text)+selected_text.length
    })
  })
  .then(responce => {
    responce.json().then( (result) =>{
      new_annotation = {
        id:result.id,
        comments: [],
        start_index: result.start_index, 
        end_index: result.end_index 
      };
      annotations.push(new_annotation);
      cur_annotation = new_annotation;
      highlight_annotations();
      refresh_comments();
    });
  });
}


function highlight_annotations(ranges_to_highlight){
  //expects the ranges to not overlap

  const book_display = document.getElementById('book_display');
  let text = book_display.textContent;
  annotations.sort((a,b) => {return b.end_index-a.end_index});

  annotations.forEach((ann)=>{
    highlight_start = ann.start_index;
    highlight_end = ann.end_index;
    prev_version_begining = text.slice(0,highlight_start);
    prev_version_end = text.slice(highlight_end);
    text_to_highlight = text.slice(highlight_start,highlight_end);

    text = prev_version_begining 
    +`<span class="highlight" onclick="set_cur_annotation(${ann.id})">`
    +text_to_highlight+'</span>'
    +prev_version_end;
  });
  book_display.innerHTML = text;
}

function highlightSelectedText() {
  var selection = window.getSelection();
  if (selection.rangeCount) {
    var range = selection.getRangeAt(0).cloneRange();
    var highlight = document.createElement('span');
    highlight.classList.add('highlight');
    range.surroundContents(highlight);
    selection.removeAllRanges();
    selection.addRange(range);
    return {
      text_elm: highlight,
      start_index: book_contents.search(highlight.textContent), 
      end_index: book_contents.search(highlight.textContent)+highlight.textContent.length
    };
    //maybe instead of searhing remove highlights get index then refresh highlights
  
  }
}

function skipTo() {
    var form = document.getElementById('skipToForm');
    var input = document.getElementById('skipToInput');
    var value = input.value;
    form.action = '/changePage/<%=book.id%>/' + value;
    form.submit();
  }

</script>

<style>


.form{
  padding: 2px;
}

.row{
  padding-right: 5px;
  padding-left: 5px;
  padding-top: 0;
  padding-bottom: 0;
  text-align: center;
}

#current_annotation_box{
  border: 1px solid #000000;
  padding: 0px;
  overflow-y: scroll;
  height: 18vh;
  width: 100%;
}

#comment_section{
  border: 1px solid #000000;
  height: 30vh;
  overflow-y: scroll;
}

#comments_header{
  height: 5%;
  width: 100%;
  position: relative;
  top: 10px;
}

#comment_section_row {
  height: 45%;
  padding-top: 0;
  padding-bottom: 0;
}
#add_comment_row{
  height: 10%;
}
#cur_annotation_row{
  height: 25%;
}

#add_comment_btn, #add_comment_text{
  width: 100%;
}

.col-container {
  display: flex;
  flex-direction: row;
  width: 100%;
}
.col-9{
  flex-shrink: 1;
}
.col-3 {
  padding: 20px;
  flex-shrink: 1;
}

#annotation_pages{
  padding: 20px;
  height: 93vh;
}
#book_display{ 
  height: 67%;
  overflow-y: scroll;
}
body{
  position: relative;
  min-height: 100vh; 
  overflow: hidden;
}

main{
  padding-top: 10vh; /*equal header height*/
  padding-bottom: 4vh; /*equal footer height*/
}

header{
  position: absolute;
  width: 100%;
  height: 10vh; 
}

footer{
  position: absolute;
  width: 100%;
  bottom: 0;
  height: 4vh; 
}

.highlight {
  background-color: yellow;
}
</style>


<%- include ('../partials/footer') %>